// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ContinuumLLC/platform-common-lib/src/messaging (interfaces: Service)

package mock

import (
	kafka "github.com/ContinuumLLC/platform-common-lib/src/kafka"
	messaging "github.com/ContinuumLLC/platform-common-lib/src/messaging"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Connect mocks base method
func (_m *MockService) Connect(_param0 *kafka.ConsumerKafkaInOutParams) error {
	ret := _m.ctrl.Call(_m, "Connect", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (_mr *MockServiceMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect", arg0)
}

// Listen mocks base method
func (_m *MockService) Listen(_param0 messaging.ListenHandler) error {
	ret := _m.ctrl.Call(_m, "Listen", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (_mr *MockServiceMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Listen", arg0)
}

// ListenWithLimiter mocks base method
func (_m *MockService) ListenWithLimiter(_param0 messaging.ListenHandler, _param1 kafka.Limiter) error {
	ret := _m.ctrl.Call(_m, "ListenWithLimiter", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenWithLimiter indicates an expected call of ListenWithLimiter
func (_mr *MockServiceMockRecorder) ListenWithLimiter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListenWithLimiter", arg0, arg1)
}

// MarkOffset mocks base method
func (_m *MockService) MarkOffset(_param0 messaging.PartitionParams) {
	_m.ctrl.Call(_m, "MarkOffset", _param0)
}

// MarkOffset indicates an expected call of MarkOffset
func (_mr *MockServiceMockRecorder) MarkOffset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkOffset", arg0)
}

// Publish mocks base method
func (_m *MockService) Publish(_param0 *messaging.Envelope) error {
	ret := _m.ctrl.Call(_m, "Publish", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (_mr *MockServiceMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0)
}
