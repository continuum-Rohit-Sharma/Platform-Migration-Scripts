// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ContinuumLLC/platform-common-lib/src/web (interfaces: Server,ServerFactory,Resource,RequestContext)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"
	time "time"

	web "github.com/ContinuumLLC/platform-common-lib/src/web"
	gomock "github.com/golang/mock/gomock"
	mux "github.com/gorilla/mux"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// GetRouter mocks base method
func (m *MockServer) GetRouter() *mux.Router {
	ret := m.ctrl.Call(m, "GetRouter")
	ret0, _ := ret[0].(*mux.Router)
	return ret0
}

// GetRouter indicates an expected call of GetRouter
func (mr *MockServerMockRecorder) GetRouter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockServer)(nil).GetRouter))
}

// HTTP2ListenAndServeTLS mocks base method
func (m *MockServer) HTTP2ListenAndServeTLS() error {
	ret := m.ctrl.Call(m, "HTTP2ListenAndServeTLS")
	ret0, _ := ret[0].(error)
	return ret0
}

// HTTP2ListenAndServeTLS indicates an expected call of HTTP2ListenAndServeTLS
func (mr *MockServerMockRecorder) HTTP2ListenAndServeTLS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTP2ListenAndServeTLS", reflect.TypeOf((*MockServer)(nil).HTTP2ListenAndServeTLS))
}

// ListenAndServe mocks base method
func (m *MockServer) ListenAndServe() {
	m.ctrl.Call(m, "ListenAndServe")
}

// ListenAndServe indicates an expected call of ListenAndServe
func (mr *MockServerMockRecorder) ListenAndServe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockServer)(nil).ListenAndServe))
}

// SetupRoutes mocks base method
func (m *MockServer) SetupRoutes(arg0 []*web.RouteConfig) {
	m.ctrl.Call(m, "SetupRoutes", arg0)
}

// SetupRoutes indicates an expected call of SetupRoutes
func (mr *MockServerMockRecorder) SetupRoutes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRoutes", reflect.TypeOf((*MockServer)(nil).SetupRoutes), arg0)
}

// MockServerFactory is a mock of ServerFactory interface
type MockServerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerFactoryMockRecorder
}

// MockServerFactoryMockRecorder is the mock recorder for MockServerFactory
type MockServerFactoryMockRecorder struct {
	mock *MockServerFactory
}

// NewMockServerFactory creates a new mock instance
func NewMockServerFactory(ctrl *gomock.Controller) *MockServerFactory {
	mock := &MockServerFactory{ctrl: ctrl}
	mock.recorder = &MockServerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerFactory) EXPECT() *MockServerFactoryMockRecorder {
	return m.recorder
}

// GetServer mocks base method
func (m *MockServerFactory) GetServer(arg0 *web.ServerConfig) web.Server {
	ret := m.ctrl.Call(m, "GetServer", arg0)
	ret0, _ := ret[0].(web.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer
func (mr *MockServerFactoryMockRecorder) GetServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockServerFactory)(nil).GetServer), arg0)
}

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockResource) Delete(arg0 web.RequestContext) {
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete
func (mr *MockResourceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResource)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockResource) Get(arg0 web.RequestContext) {
	m.ctrl.Call(m, "Get", arg0)
}

// Get indicates an expected call of Get
func (mr *MockResourceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResource)(nil).Get), arg0)
}

// Others mocks base method
func (m *MockResource) Others(arg0 web.RequestContext) {
	m.ctrl.Call(m, "Others", arg0)
}

// Others indicates an expected call of Others
func (mr *MockResourceMockRecorder) Others(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Others", reflect.TypeOf((*MockResource)(nil).Others), arg0)
}

// Post mocks base method
func (m *MockResource) Post(arg0 web.RequestContext) {
	m.ctrl.Call(m, "Post", arg0)
}

// Post indicates an expected call of Post
func (mr *MockResourceMockRecorder) Post(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockResource)(nil).Post), arg0)
}

// Put mocks base method
func (m *MockResource) Put(arg0 web.RequestContext) {
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put
func (mr *MockResourceMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockResource)(nil).Put), arg0)
}

// MockRequestContext is a mock of RequestContext interface
type MockRequestContext struct {
	ctrl     *gomock.Controller
	recorder *MockRequestContextMockRecorder
}

// MockRequestContextMockRecorder is the mock recorder for MockRequestContext
type MockRequestContextMockRecorder struct {
	mock *MockRequestContext
}

// NewMockRequestContext creates a new mock instance
func NewMockRequestContext(ctrl *gomock.Controller) *MockRequestContext {
	mock := &MockRequestContext{ctrl: ctrl}
	mock.recorder = &MockRequestContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestContext) EXPECT() *MockRequestContextMockRecorder {
	return m.recorder
}

// GetData mocks base method
func (m *MockRequestContext) GetData() ([]byte, error) {
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData
func (mr *MockRequestContextMockRecorder) GetData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockRequestContext)(nil).GetData))
}

// GetRemoteAddr mocks base method
func (m *MockRequestContext) GetRemoteAddr() (string, error) {
	ret := m.ctrl.Call(m, "GetRemoteAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAddr indicates an expected call of GetRemoteAddr
func (mr *MockRequestContextMockRecorder) GetRemoteAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAddr", reflect.TypeOf((*MockRequestContext)(nil).GetRemoteAddr))
}

// GetRequest mocks base method
func (m *MockRequestContext) GetRequest() *http.Request {
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest
func (mr *MockRequestContextMockRecorder) GetRequest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockRequestContext)(nil).GetRequest))
}

// GetRequestDcDateTimeUTC mocks base method
func (m *MockRequestContext) GetRequestDcDateTimeUTC() time.Time {
	ret := m.ctrl.Call(m, "GetRequestDcDateTimeUTC")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetRequestDcDateTimeUTC indicates an expected call of GetRequestDcDateTimeUTC
func (mr *MockRequestContextMockRecorder) GetRequestDcDateTimeUTC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestDcDateTimeUTC", reflect.TypeOf((*MockRequestContext)(nil).GetRequestDcDateTimeUTC))
}

// GetResponse mocks base method
func (m *MockRequestContext) GetResponse() http.ResponseWriter {
	ret := m.ctrl.Call(m, "GetResponse")
	ret0, _ := ret[0].(http.ResponseWriter)
	return ret0
}

// GetResponse indicates an expected call of GetResponse
func (mr *MockRequestContextMockRecorder) GetResponse() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockRequestContext)(nil).GetResponse))
}

// GetVars mocks base method
func (m *MockRequestContext) GetVars() map[string]string {
	ret := m.ctrl.Call(m, "GetVars")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetVars indicates an expected call of GetVars
func (mr *MockRequestContextMockRecorder) GetVars() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVars", reflect.TypeOf((*MockRequestContext)(nil).GetVars))
}
